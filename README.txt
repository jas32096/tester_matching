Tested with
  Python 3.7.2
  SQLite 3.23.0

Environment
  If you'd like, create a virtual env for this project
    $ python3 -m venv .env
    $ source .env/bin/activate
  Install dependencies
    $ pip install -r requirements.txt

Database
  This repo includes a prepopulated db file.
  The same file can be generated by executing
  the schema.sql from within the data directory.

    $ cd data && sqlite3 data.db < ../schema.sql

  Ensure that your CSV files do not include headers
  or they will be included as the first row in
  their respective tables.

  Both modules in this package expect the file
  to at the path user_search/data.db

To Run
  CLI mode
    $ python3 -m user_search.cli

    usage: user_search [-h] [-c COUNTRIES [COUNTRIES ...]]
		       [-d DEVICES [DEVICES ...]] [--show-devices]
		       [-f {normal,tsv,json} | --json | --tsv]
		       {force-old-style} ...

    positional arguments:
      {force-old-style}

    optional arguments:
      -h, --help            show this help message and exit
      -c COUNTRIES [COUNTRIES ...], --countries COUNTRIES [COUNTRIES ...]
			    No value includes all
      -d DEVICES [DEVICES ...], --devices DEVICES [DEVICES ...]
			    No value includes all
      --show-devices        Always True with --json and False with --tsv
      -f {normal,tsv,json}, --format {normal,tsv,json}
      --json
      --tsv

    When using in normal mode, it's beneficial to pipe output into column.
      bash-5.0$ python -m user_search.cli --show-devices -c US --device 'iphone 4' 'Droid Razor' | column -ts $'\t'
      Name                                                                             ID  Country  Experience  Last Login
      Taybin Rutkin                                                                    4   US       125         2013-01-01 10:57:38
	 ['iPhone 4', 'iPhone 4S']
      Miguel Bautista                                                                  1   US       114         2013-08-04 23:57:38
	 ['iPhone 4', 'iPhone 4S', 'iPhone 5', 'iPhone 3']
      Michael Lubavin                                                                  2   US       99          2013-07-12 13:27:18
	 ['Galaxy S3', 'Galaxy S4', 'Nexus 4', 'Droid Razor', 'Droid DNA', 'HTC One']
      ----------------
      Total 3

    Alternatively, arguments can be passed as CSV in old style mode
      bash-5.0$ python -m user_search.cli force-old-style 'GB, JP' ALL | column -ts $'\t'
      Name                   ID  Country  Experience  Last Login
      Lucas Lowry            7   JP       117         2013-07-12 23:57:38
      Sean Wellington        8   JP       116         2013-08-05 13:27:38
      Stanley Chen           6   GB       110         2013-08-04 21:57:38
      Mingquan Zheng         5   JP       109         2013-08-04 22:07:38
      Leonard Sutton         3   GB       106         2013-07-16 21:17:28
      Darshini Thiagarajan   9   GB       104         2013-08-05 15:00:38
      ---------------------
      Total 6

    In JSON mode, output can be piped into jq (or json.tool, if you'd like to avoid the dependency).
      bash-5.0$ python -m user_search.cli -c JP DB -d 'iphone 3' 'Droid DNA' --json | python -m json.tool
      {
	  "testers": [
	      {
		  "Name": "Lucas Lowry",
		  "ID": 7,
		  "Country": "JP",
		  "Experience": 117,
		  "Last Login": "2013-07-12 23:57:38",
		  "devices": [
		      "Galaxy S3",
		      "Galaxy S4",
		      "Nexus 4",
		      "Droid Razor",
		      "Droid DNA"
		  ]
	      },
	      {
		  "Name": "Sean Wellington",
		  "ID": 8,
		  "Country": "JP",
		  "Experience": 116,
		  "Last Login": "2013-08-05 13:27:38",
		  "devices": [
		      "iPhone 4",
		      "iPhone 5",
		      "Nexus 4",
		      "HTC One",
		      "iPhone 3"
		  ]
	      },
	      {
		  "Name": "Mingquan Zheng",
		  "ID": 5,
		  "Country": "JP",
		  "Experience": 109,
		  "Last Login": "2013-08-04 22:07:38",
		  "devices": [
		      "iPhone 4",
		      "Galaxy S4",
		      "Nexus 4",
		      "Droid Razor",
		      "iPhone 3"
		  ]
	      }
	  ],
	  "total": 3
      }

  REST API
    $ python3 -m user_search.api

    This will create the application on localhost:5000
    Note: In production you'd want to put the app behind a proper WSGI.

    GET /search
    Supports both JSON and TSV responses.
    query args: (c & d args are formatted the same way as the old style CLI interface)
      - c (countries)
      - d (devices)
      - fmt (json or tsv)

    GET /search?d=iphone+3%2C+nexus+4&c=GB&fmt=tsv HTTP/1.1
    Accept: */*
    Accept-Encoding: gzip, deflate
    Connection: keep-alive
    Host: localhost:5000
    User-Agent: HTTPie/1.0.2

    HTTP/1.0 200 OK
    Content-Length: 132
    Content-Type: text/tab-separated-values
    Date: Mon, 21 Jan 2019 03:31:22 GMT
    Server: Werkzeug/0.14.1 Python/3.7.2

    Name	ID	Country	Experience	Last Login
    Leonard Sutton	3	GB	106	2013-07-16 21:17:28
    Darshini Thiagarajan	9	GB	104	2013-08-05 15:00:38
